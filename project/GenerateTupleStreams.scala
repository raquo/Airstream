import sbt._

import java.io.File

case class GenerateTupleStreams(
    sourceDir: File,
    from: Int,
    to: Int
) extends SourceGenerator(
      sourceDir / "scala" / "com" / "raquo" / "airstream" / "extensions" / s"TupleStreams.scala"
    ) {

  override def apply(): Unit = {
    line("package com.raquo.airstream.extensions")
    line()
    line("import com.raquo.airstream.core.EventStream")
    line("import com.raquo.airstream.misc.{FilterStream, MapStream}")
    line()
    line(
      "// #Warning do not edit this file directly, it is generated by GenerateTupleStreams.scala"
    )
    line()
    line(
      "// These mapN and filterN helpers are implicitly available on streams of tuples"
    )
    line()
    for (n <- from to to) {
      enter(
        s"class TupleStream${n}[${tupleType(n)}](val stream: EventStream[(${tupleType(n)})]) extends AnyVal {",
        "}"
      ) {
        line()
        enter(
          s"def mapN[Out](project: (${tupleType(n)}) => Out): EventStream[Out] = {",
          "}"
        ) {
          enter(s"new MapStream[(${tupleType(n)}), Out](", ")") {
            line("parent = stream,")
            line(s"project = v => project(${tupleType(n, "v._")}),")
            line(s"recover = None")
          }
        }
        line()
        enter(
          s"def filterN(passes: (${tupleType(n)}) => Boolean): EventStream[(${tupleType(n)})] = {",
          "}"
        ) {
          enter(s"new FilterStream[(${tupleType(n)})](", ")") {
            line("parent = stream,")
            line(s"passes = v => passes(${tupleType(n, "v._")})")
          }
        }
      }
      line()
      line("// --")
      line()
    }
  }
}
