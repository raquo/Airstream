import sbt._

import java.io.File

case class GenerateCombineStreamsTest(
    testSourceDir: File,
    from: Int,
    to: Int
) extends SourceGenerator(
      testSourceDir / "scala" / "com" / "raquo" / "airstream" / "combine" / "generated" / s"CombineStreamsSpec.scala"
    ) {

  def apply(): Unit = {
    line("package com.raquo.airstream.combine.generated")
    line()
    line("import com.raquo.airstream.UnitSpec")
    line("import com.raquo.airstream.core.{EventStream, Observer}")
    line("import com.raquo.airstream.eventbus.EventBus")
    line("import com.raquo.airstream.fixtures.TestableOwner")
    line()
    line("import scala.collection.mutable")
    line()
    line(
      "// #Warning do not edit this file directly, it is generated by GenerateCombineStreamsTest.scala"
    )
    line()
    enter(s"class CombineStreamsSpec extends UnitSpec {", "}") {
      line()
      for (i <- 1 to to) {
        line(s"case class T${i}(v: Int)")
      }
      line()
      for (n <- from to to) {
        enter(s"""it("CombineStream${n} works") {""", "}") {
          line()
          line("implicit val testOwner: TestableOwner = new TestableOwner")
          line()
          for (i <- 1 to n) {
            line(s"val bus${i} = new EventBus[T${i}]()")
          }
          line()
          line(
            s"val combinedStream = EventStream.combine(${tupleType(n, "bus")})"
          )
          line()
          line(s"val effects = mutable.Buffer[(${tupleType(n)})]()")
          line()
          line(s"val observer = Observer[(${tupleType(n)})](effects += _)")
          line()
          line("// --")
          line()
          line("effects.shouldBeEmpty")
          line()
          line("// --")
          line("val subscription = combinedStream.addObserver(observer)")
          line("effects.shouldBeEmpty")
          line()
          line("// --")
          line()

          for (i <- 1 to n) {
            line(s"bus${i}.writer.onNext(T${i}(0))")
            if (i < n) {
              line("effects.shouldBeEmpty")
            } else {
              enter("effects.toList shouldBe List(", ")") {
                line(s"(${(1 to n).map(i => s"T${i}(0)").mkString(", ")})")
              }
            }
            line()
          }

          line("// --")

          enter("for (iteration <- 1 to 10) {", "}") {
            line("effects.clear()")
            for (i <- 1 to n) {
              line(s"bus${i}.emit(T${i}(iteration))")
            }
            enter("effects.toList shouldBe List(", ")") {
              for (i <- 1 to n) {
                line(s"(${(1 to n)
                    .map(j => s"T${j}(iteration${if (j <= i) "" else " - 1"})")
                    .mkString(", ")})${if (i < n) "," else ""}")
              }
            }
          }
          line()
          line("subscription.kill()")

        }
        line()
      }
      line()
    }
  }

}
